// <auto-generated />
using System;
using ComunApi.DbsContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComunApi.Migrations
{
    [DbContext(typeof(CoDbContext))]
    [Migration("20250419150540_Initial_Mig")]
    partial class Initial_Mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComunApi.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComBanner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ComPicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("ComunApi.Models.Intermediares.UserCommunityRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommunityId1")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "CommunityId", "RoleId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("CommunityId1");

                    b.HasIndex("RoleId");

                    b.ToTable("CommunityRoles");
                });

            modelBuilder.Entity("ComunApi.Models.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountResponses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("ThreadId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ComunApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanBanUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteResponses")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDeleteThreads")
                        .HasColumnType("boolean");

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ComunApi.Models.ThreadCom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("ComunApi.Models.ThreadImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ThreadId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("ThreadImages");
                });

            modelBuilder.Entity("ComunApi.Models.Intermediares.UserCommunityRole", b =>
                {
                    b.HasOne("ComunApi.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunApi.Models.Community", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("CommunityId1");

                    b.HasOne("ComunApi.Models.Role", "Role")
                        .WithMany("UserCommunityRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComunApi.Models.Response", b =>
                {
                    b.HasOne("ComunApi.Models.Response", "ParentResponse")
                        .WithMany("Responses")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComunApi.Models.ThreadCom", "Thread")
                        .WithMany("Responses")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentResponse");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ComunApi.Models.Role", b =>
                {
                    b.HasOne("ComunApi.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("ComunApi.Models.ThreadCom", b =>
                {
                    b.HasOne("ComunApi.Models.Community", "Community")
                        .WithMany("Threads")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("ComunApi.Models.ThreadImage", b =>
                {
                    b.HasOne("ComunApi.Models.ThreadCom", "Thread")
                        .WithMany("Images")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ComunApi.Models.Community", b =>
                {
                    b.Navigation("Threads");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ComunApi.Models.Response", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("ComunApi.Models.Role", b =>
                {
                    b.Navigation("UserCommunityRoles");
                });

            modelBuilder.Entity("ComunApi.Models.ThreadCom", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
